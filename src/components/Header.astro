---
import HeaderButton from "./HeaderButton.astro";
import HeaderSeparator from "./HeaderSeparator.astro";

const navItems = [
    {
        title: "Sobre mí",
        label: "Sobre mí",
        url: "/#about-me",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M19.875 6.27c.7 .398 1.13 1.143 1.125 1.948v7.284c0 .809 -.443 1.555 -1.158 1.948l-6.75 4.27a2.269 2.269 0 0 1 -2.184 0l-6.75 -4.27a2.225 2.225 0 0 1 -1.158 -1.948v-7.285c0 -.809 .443 -1.554 1.158 -1.947l6.75 -3.98a2.33 2.33 0 0 1 2.25 0l6.75 3.98h-.033z"></path>
                <path d="M12 9h.01"></path>
                <path d="M11 12h1v4h1"></path>
        </svg>`,
        separator: true,
    },
    {
        title: "Proyectos",
        label: "Proyectos",
        url: "/#projects",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M7 4a2 2 0 0 0 -2 2v3a2 3 0 0 1 -2 3a2 3 0 0 1 2 3v3a2 2 0 0 0 2 2"></path>
            <path d="M17 4a2 2 0 0 1 2 2v3a2 3 0 0 0 2 3a2 3 0 0 0 -2 3v3a2 2 0 0 1 -2 2"></path>
        </svg>`,
        separator: true,
    },
    {
        title: "Trayectoria",
        label: "Trayectoria",
        url: "/#career",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M12 20m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
            <path d="M10 20h-6"></path>
            <path d="M14 20h6"></path>
            <path d="M12 15l-2 -2h-3a1 1 0 0 1 -1 -1v-8a1 1 0 0 1 1 -1h10a1 1 0 0 1 1 1v8a1 1 0 0 1 -1 1h-3l-2 2z"></path>
            <path d="M9 6h6"></path>
            <path d="M9 9h3"></path>
        </svg>`,
        separator: true,
    },
    {
        title: "CV",
        label: "CV",
        url: "/cv.pdf",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2"></path>
            <path d="M7 11l5 5l5 -5"></path>
            <path d="M12 4l0 12"></path>
        </svg>`,
        separator: false,
    },
];
---

<header
    class="sticky top-0 w-full py-4 flex flex-col justify-between items-center text-white font-mono z-10 rounded-full"
>
    <nav
        class="flex flex-row sm:gap-2 justify-center items-center text-center kode-mono-700 mb-2"
    >
        {
        navItems.map((link) => (
            <div class="flex flex-row">
                <HeaderButton href={link.url} title={link.title}>
                <span class="hidden md:inline">{link.label}</span>
                <Fragment set:html={link.svg}/>
            </HeaderButton>
            {link.separator && <HeaderSeparator />}
            </div>
        ))
        }
    </nav>

    <div id="header-underline" class="w-screen h-[2px]"></div>
</header>

<script>
    document.addEventListener("astro:page-load", () => {
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll("header nav a");

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") == entry.target.id
                        ) {
                            item.classList.add("text-yellow-500");
                        } else {
                            item.classList.remove("text-yellow-500");
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.3,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadown {
        to {
            @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
        }
    }
</style>
