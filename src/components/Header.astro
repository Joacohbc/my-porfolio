---
import HeaderSeparator from "./HeaderSeparator.astro";

const navItems = [
    {
        title: "Sobre mí",
        url: "/#about-me",
        label: "about-me",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M19.875 6.27c.7 .398 1.13 1.143 1.125 1.948v7.284c0 .809 -.443 1.555 -1.158 1.948l-6.75 4.27a2.269 2.269 0 0 1 -2.184 0l-6.75 -4.27a2.225 2.225 0 0 1 -1.158 -1.948v-7.285c0 -.809 .443 -1.554 1.158 -1.947l6.75 -3.98a2.33 2.33 0 0 1 2.25 0l6.75 3.98h-.033z"></path>
                <path d="M12 9h.01"></path>
                <path d="M11 12h1v4h1"></path>
        </svg>`,
        last: false,
        first: true,
    },
    {
        title: "Proyectos",
        url: "/#projects",
        label: "projects",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M7 4a2 2 0 0 0 -2 2v3a2 3 0 0 1 -2 3a2 3 0 0 1 2 3v3a2 2 0 0 0 2 2"></path>
            <path d="M17 4a2 2 0 0 1 2 2v3a2 3 0 0 0 2 3a2 3 0 0 0 -2 3v3a2 2 0 0 1 -2 2"></path>
        </svg>`,
        last: false,
        first: false,
    },
    {
        title: "Trayectoria",
        url: "/#career",
        label: "career",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M12 20m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
            <path d="M10 20h-6"></path>
            <path d="M14 20h6"></path>
            <path d="M12 15l-2 -2h-3a1 1 0 0 1 -1 -1v-8a1 1 0 0 1 1 -1h10a1 1 0 0 1 1 1v8a1 1 0 0 1 -1 1h-3l-2 2z"></path>
            <path d="M9 6h6"></path>
            <path d="M9 9h3"></path>
        </svg>`,
        last: false,
        first: false,
    },
    {
        title: "CV",
        url: "/cv.pdf",
        label: "cv",
        svg: `<svg class="w-5" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
            <path d="M14 3v4a1 1 0 0 0 1 1h4" />
            <path d="M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z" />
            <path d="M9 9l1 0" />
            <path d="M9 13l6 0" />
            <path d="M9 17l6 0" />
        </svg>`,
        last: true,
        first: false,
    },
];
---

<div class="text-white w-full text-center pt-4 px-5 font-serif">
    <h1 class="text-4xl mb-2 font-bold">Porfolio de Joaquin Genova</h1>
    <h2 class="text-md sm:text-xl">
        <strong>Desarrollador de Software & Técnico Superior en TI</strong>
    </h2>
</div>

<header
    class="sticky font-serif pt-2 top-0 w-full flex flex-col justify-between items-center text-white z-10"
>
    <nav
        class="flex flex-row sm:gap-2 justify-center items-center text-center mb-2 px-5 py-1 rounded-full"
    >
        {
            navItems.map((link) => (
                <div class="flex flex-row">
                    {link.first && <HeaderSeparator alwaysHide={true} />}
                    <a
                        class="flex flex-row items-center gap-2 hover:drop-shadow-sm p-2 rounded underline-animation"
                        href={link.url}
                        title={link.title}
                        aria-label={link.label}
                    >
                        <span class="hidden md:inline">{link.title}</span>
                        <Fragment set:html={link.svg} />
                    </a>
                    {!link.last && <HeaderSeparator />}
                    {link.last && <HeaderSeparator alwaysHide={true} />}
                </div>
            ))
        }
    </nav>
</header>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const sections = document.querySelectorAll("section");
        const navItems = document.querySelectorAll("header nav a");

        // const entiesVisibles = new Map();
        // const callback = (entries: IntersectionObserverEntry[]) => {
        //     entries.forEach((entry) => {
        //         if (entry.isIntersecting) {
        //             navItems.forEach((item) => {
        //                 if (item.getAttribute("aria-label") == entry.target.id) {
        //                     item.classList.add("current-section");
        //                     // Get SVG Node and change color
        //                     (item.childNodes[3] as Element).setAttribute("stroke", "#eb8b3c");
        //                 } else {
        //                     item.classList.remove("current-section");
        //                     // Get SVG Node and change color
        //                     (item.childNodes[3] as Element).setAttribute("stroke", "#ffffff");
        //                 }
        //             });
        //         }
        //     });
        // };

        const entiesVisibles = new Map();
        const callback = (entries: IntersectionObserverEntry[]) => {

            // Update the map with the new entries
            entries.forEach((entry) => {
                entiesVisibles.set(entry.target.id, entry);
            });

            // Get the visible sections
            const visibleSections = Array.from(entiesVisibles.values()).filter((entry) => entry.isIntersecting);

            // Calculate percentage of the section visible
            const visibleSectionsPercentage = visibleSections.map((entry) => {
                const visibleHeight = entry.intersectionRect.height;
                const totalHeight = entry.boundingClientRect.height;
                return visibleHeight / totalHeight;
            });

            // Get the section with the most visible percentage
            const maxVisibleSection = visibleSections[visibleSectionsPercentage.indexOf(Math.max(...visibleSectionsPercentage))];
            
            // Set the current section based on the most visible section
            navItems.forEach((item) => {
                if (item.getAttribute("aria-label") == maxVisibleSection.target.id) {
                    item.classList.add("current-section");
                    // Get SVG Node and change color
                    (item.childNodes[3] as Element).setAttribute("stroke", "#eb8b3c");
                } else {
                    item.classList.remove("current-section");
                    
                    // Get SVG Node and change color
                    (item.childNodes[3] as Element).setAttribute("stroke", "#ffffff");
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: "0px",
            threshold: 0.1, // 10% of the section must be visible
        });

        // If the page is not at the top, wait for the user to scroll to start observing the sections
        if (window.scrollY <= 0) {
            document.addEventListener("scroll", () => {
                if (window.scrollY <= 0) {
                    return;
                }

                sections.forEach((section) => {
                    observer.observe(section);
                });
            });
        } else {
            // If the page is already scrolled, start observing the sections
            sections.forEach((section) => {
                observer.observe(section);
            });
        }

        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    .underline-animation::after {
        content: "";
        position: absolute;
        transform: scaleX(0);
        width: 100%;
        height: 2px;
        bottom: 0;
        left: 0;
        transform-origin: left right;
        transition: transform 0.3s ease-out;
    }

    .underline-animation:hover {
        font-weight: bold;
        filter: drop-shadow(0 0 5px #eb8b3c);
        transition: color 0.3s;
    }

    .underline-animation:hover::after {
        transform: scaleX(1);
        transform-origin: right left;
        background-color: white;
    }

    .current-section {
        font-weight: bold;
        color: #eb8b3c;
        filter: drop-shadow(0 0 15px #eb8b3c);
        transition: all 1.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    @keyframes nav-shadown {
        to {
            @apply shadow-lg ring-1 backdrop-blur bg-lightblack/70;
        }
    }
</style>
